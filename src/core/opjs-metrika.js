(function () {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –Ω–µ –≤—ã–∑–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (window.opjsMetrikaLoaded) return;
    window.opjsMetrikaLoaded = true;
  
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultConfig = {
      counterId: null, // ID —Å—á–µ—Ç—á–∏–∫–∞ Yandex Metrika
      apiKey: null, // API-–∫–ª—é—á OverpoweredJS (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
      paramsToSend: [], // –ö–ª—é—á–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ (–ø—É—Å—Ç–æ–π = –≤–µ—Å—å –æ–±—ä–µ–∫—Ç)
      sendAs: 'both', // 'params' | 'userParams' | 'both'
      debug: false // –†–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (true = –≤–∫–ª—é—á–µ–Ω–æ)
    };
  
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const config = Object.assign({}, defaultConfig, window.opjsMetrikaConfig || {});
    
    // ===== –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å —ç–º–æ–¥–∑–∏ =====
    function maskApiKey(key) {
      if (!key) return '‚Äî';
      const s = String(key);
      if (s.length <= 6) return `${'*'.repeat(Math.max(0, s.length - 2))}${s.slice(-2)}`;
      return `${s.slice(0, 2)}${'*'.repeat(s.length - 4)}${s.slice(-2)}`;
    }

    const tag = '[opjs-metrika]';
    function dbg(level, emoji, message, ...args) {
      if (!config.debug) return;
      const text = `${emoji} ${tag} ${message}`;
      if (level === 'warn') return console.warn(text, ...args);
      if (level === 'error') return console.error(text, ...args);
      return console.log(text, ...args);
    }
    const log = {
      init: (msg, ...a) => dbg('info', 'üöÄ', msg, ...a),
      info: (msg, ...a) => dbg('info', '‚ÑπÔ∏è', msg, ...a),
      ok: (msg, ...a) => dbg('info', '‚úÖ', msg, ...a),
      warn: (msg, ...a) => dbg('warn', '‚ö†Ô∏è', msg, ...a),
      error: (msg, ...a) => dbg('error', 'üõë', msg, ...a),
      event: (msg, ...a) => dbg('info', 'üñ±Ô∏è', msg, ...a),
      send: (msg, ...a) => dbg('info', 'üì§', msg, ...a)
    };

    log.init('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞');
    log.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞', {
      counterId: config.counterId,
      sendAs: config.sendAs,
      paramsToSend: Array.isArray(config.paramsToSend) ? config.paramsToSend : 'all',
      apiKey: maskApiKey(config.apiKey),
      debug: config.debug
    });

    // ===== –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π –∏ –≥–æ–Ω–æ–∫ =====
    let inFlight = false;
    const storageKey = `opjsMetrika:${config.counterId || 'no-id'}`;
    function wasSent() { return sessionStorage.getItem(storageKey) === 'true'; }
    function markSent() { sessionStorage.setItem(storageKey, 'true'); }
  
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ú–µ—Ç—Ä–∏–∫–∏ (ym v2.0 —Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ yaCounter)
    function getMetrikaSender() {
      if (typeof window.ym === 'function' && config.counterId) {
        log.ok('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ú–µ—Ç—Ä–∏–∫–∏ 2.0: ym');
        return function send(method, data) { window.ym(config.counterId, method, data); };
      }
      const yaCounter = window[`yaCounter${config.counterId}`];
      if (yaCounter) {
        log.ok('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–∞—Ä–æ–π –ú–µ—Ç—Ä–∏–∫–∏: yaCounter');
        return function send(method, data) {
          if (method === 'params' && typeof yaCounter.params === 'function') yaCounter.params(data);
          if (method === 'userParams' && typeof yaCounter.userParams === 'function') yaCounter.userParams(data);
        };
      }
      log.warn('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∏ ym, –Ω–∏ yaCounter)');
      return null;
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Yandex Metrika —Å –≥–∏–±–∫–æ–π —Å–µ–º–∞–Ω—Ç–∏–∫–æ–π
    function sendToYandexMetrika(fpData) {
      const send = getMetrikaSender();
      if (!send) {
        console.error('Yandex Metrika –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ counterId.');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      let dataToSend = {};
      if (Array.isArray(config.paramsToSend) && config.paramsToSend.length > 0) {
        config.paramsToSend.forEach(key => {
          if (Object.prototype.hasOwnProperty.call(fpData, key)) {
            dataToSend[key] = fpData[key];
          } else {
            log.warn(`–ö–ª—é—á "${key}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö OverpoweredJS.`);
          }
        });
      } else {
        dataToSend = { ...fpData }; // –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const hasPayload = dataToSend && Object.keys(dataToSend).length > 0;
      if (!hasPayload) {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Yandex Metrika.');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É sendAs
      try {
        const sendAs = (config.sendAs || 'both');
        log.send(`–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ú–µ—Ç—Ä–∏–∫—É (sendAs: ${sendAs})`, { keys: Object.keys(dataToSend) });
        if (sendAs === 'params' || sendAs === 'both') send('params', dataToSend);
        if (sendAs === 'userParams' || sendAs === 'both') send('userParams', dataToSend);
        log.ok('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Yandex Metrika');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Yandex Metrika:', err);
      }
    }
  
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    function fetchAndSendFingerprint(triggerEventName) {
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π
      if (wasSent()) {
        log.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞: –¥–∞–Ω–Ω—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏');
        return;
      }
      if (inFlight) {
        log.warn('–ó–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
        return;
      }

      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (!config.counterId) {
        console.error('–ù–µ —É–∫–∞–∑–∞–Ω counterId –¥–ª—è Yandex Metrika.');
        return;
      }
      if (!config.apiKey) {
        console.error('–ù–µ —É–∫–∞–∑–∞–Ω apiKey –¥–ª—è OverpoweredJS.');
        return;
      }
      if (!window.opjs) {
        console.error('OverpoweredJS –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.');
        return;
      }

      inFlight = true;
      log.event(`–ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: ${triggerEventName || 'unknown'}. –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–∞`);
      window.opjs({ API_KEY: config.apiKey })
        .then(fp => {
          log.ok('–û—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ú–µ—Ç—Ä–∏–∫—É');
          sendToYandexMetrika(fp);
          markSent();
        })
        .catch(err => {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö OverpoweredJS:', err);
          log.error('–°–±–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞', err);
        })
        .finally(() => {
          inFlight = false;
        });
    }
  
    // –ù–∞–¥—ë–∂–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–ø—É—Å–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function bindFirstInteractionOnce() {
      const events = ['click', 'pointerdown', 'keydown'];
      log.info('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è', { events });
      const handler = (ev) => {
        log.event(`–°—Ä–∞–±–æ—Ç–∞–ª–æ —Å–æ–±—ã—Ç–∏–µ: ${ev.type}`);
        unbind();
        fetchAndSendFingerprint(ev.type);
      };
      function unbind() {
        events.forEach((e) => window.removeEventListener(e, handler));
      }
      events.forEach((e) => window.addEventListener(e, handler, { once: true }));
    }

    bindFirstInteractionOnce();
  })();